# -*- coding: utf-8 -*-
"""programsection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LJwRHhPlI06uVYbNrB-D7R4f7FUI4yXP
"""

from google.colab import files
import pandas as pd
uploaded = files.upload()
df = pd.read_csv(next(iter(uploaded)))
df.head()

from google.colab import sheets
sheet = sheets.InteractiveSheet(df=df)

# prompt: give me a code to get 20 to 30 movie id from the above csv file

# Assuming 'movieId' is the column name containing movie IDs
movie_ids = df['movieId'][20:31]  # Get movie IDs from index 20 to 30 (inclusive)
movie_ids

# prompt: give me a code to get highest genres graph form the above csv file

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'genres' is the column name containing movie genres
genre_counts = df['genres'].str.split('|').explode().value_counts()

# Create the bar plot
plt.figure(figsize=(10, 6))
sns.barplot(x=genre_counts.index, y=genre_counts.values)
plt.xlabel("Genres")
plt.ylabel("Number of Movies")
plt.title("Highest Genres Distribution")
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability
plt.tight_layout()
plt.show()

# prompt: give a code to get movies piechart on movie year basis from above csv file

import pandas as pd
import matplotlib.pyplot as plt

# Assuming 'title' column contains movie titles and 'year' contains release years
# Extract the year from the title if it's not available in a separate 'year' column
df['year'] = df['title'].str.extract(r'\((\d{4})\)')
df['year'] = pd.to_numeric(df['year'], errors='coerce') #Convert to numeric, handling non-numeric values
year_counts = df['year'].value_counts().sort_index()

#Create the pie chart
plt.figure(figsize=(12, 12))
plt.pie(year_counts, labels=year_counts.index, autopct='%1.1f%%', startangle=90)
plt.title('Distribution of Movies by Year')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

# prompt: give a code to get graph of top 5 movieid on the basis of movie year for the above csv file

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'movieId', 'title', and 'year' are column names in your DataFrame
# If your year is embedded within the title, extract it as shown in the previous response
# ... (previous code to extract year if needed) ...


# Group by year and get the top 5 movieIds for each year
top_movies_by_year = df.groupby('year')['movieId'].apply(lambda x: x.value_counts().nlargest(5)).reset_index(name='TopMovieIds')

# Create a bar plot to visualize the top movie IDs for each year
plt.figure(figsize=(12, 6))
sns.barplot(x='year', y='TopMovieIds', hue='level_1', data=top_movies_by_year)  # Assuming level_1 is movieId
plt.xlabel("Movie Year")
plt.ylabel("Top Movie IDs")
plt.title("Top 5 Movie IDs by Year")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# prompt: give me a code to get bar graph of lest 10 movie on the basis of movie year

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'year' column exists and contains the release year
# If not, extract the year from the title as shown in the previous response

# Get the 10 most frequent movie years
top_10_years = df['year'].value_counts().nlargest(10)

# Create the bar plot
plt.figure(figsize=(10, 6))
sns.barplot(x=top_10_years.index, y=top_10_years.values)
plt.xlabel("Movie Year")
plt.ylabel("Number of Movies")
plt.title("Top 10 Movie Years")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# prompt: give me a code to get point graph of lest 10 movie on the basis of movie year

import matplotlib.pyplot as plt

# Assuming 'year' column exists and contains the release year
# If not, extract the year from the title as shown in the previous response

# Get the 10 most frequent movie years
top_10_years = df['year'].value_counts().nlargest(10)

# Create the point plot
plt.figure(figsize=(10, 6))
plt.plot(top_10_years.index, top_10_years.values, marker='o', linestyle='-')
plt.xlabel("Movie Year")
plt.ylabel("Number of Movies")
plt.title("Top 10 Movie Years (Point Plot)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()